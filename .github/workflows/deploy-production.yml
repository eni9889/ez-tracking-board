name: Deploy to Production

on:
  push:
    branches: [production]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Run frontend tests
        run: npm test -- --watchAll=false --passWithNoTests

      - name: Run backend tests
        run: cd server && npm test -- --watchAll=false --passWithNoTests

  build-backend:
    name: Build and Push Backend Docker Image
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/ez-tracking-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-frontend:
    name: Build Frontend
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get backend URL from Pulumi
        id: get-backend-url
        run: |
          # This would be populated from Pulumi stack outputs
          echo "BACKEND_URL=${{ secrets.BACKEND_URL }}" >> $GITHUB_OUTPUT

      - name: Build React app
        env:
          REACT_APP_API_URL: ${{ steps.get-backend-url.outputs.BACKEND_URL }}
          REACT_APP_ENV: production
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: build/
          retention-days: 1

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Pulumi
        uses: pulumi/actions@v4

      - name: Install dependencies
        working-directory: ./pulumi
        run: npm ci

      - name: Deploy infrastructure
        working-directory: ./pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          pulumi stack select production --create
          pulumi up --yes

      - name: Get stack outputs
        id: pulumi-outputs
        working-directory: ./pulumi
        run: |
          echo "FRONTEND_BUCKET=$(pulumi stack output frontendBucketName)" >> $GITHUB_OUTPUT
          echo "FRONTEND_URL=$(pulumi stack output frontendUrl)" >> $GITHUB_OUTPUT
          echo "BACKEND_URL=$(pulumi stack output backendUrl)" >> $GITHUB_OUTPUT
          echo "ECS_CLUSTER=$(pulumi stack output ecsClusterName)" >> $GITHUB_OUTPUT
          echo "ECS_SERVICE=$(pulumi stack output ecsServiceName)" >> $GITHUB_OUTPUT

    outputs:
      frontend-bucket: ${{ steps.pulumi-outputs.outputs.FRONTEND_BUCKET }}
      frontend-url: ${{ steps.pulumi-outputs.outputs.FRONTEND_URL }}
      backend-url: ${{ steps.pulumi-outputs.outputs.BACKEND_URL }}
      ecs-cluster: ${{ steps.pulumi-outputs.outputs.ECS_CLUSTER }}
      ecs-service: ${{ steps.pulumi-outputs.outputs.ECS_SERVICE }}

  deploy-frontend:
    name: Deploy Frontend to S3
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: build/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync build/ s3://${{ needs.deploy-infrastructure.outputs.frontend-bucket }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "index.html" \
            --exclude "*.json"
          
          # Upload index.html and JSON files without cache
          aws s3 cp build/index.html s3://${{ needs.deploy-infrastructure.outputs.frontend-bucket }}/ \
            --cache-control "no-cache, no-store, must-revalidate"
          
          aws s3 cp build/ s3://${{ needs.deploy-infrastructure.outputs.frontend-bucket }}/ \
            --recursive \
            --exclude "*" \
            --include "*.json" \
            --cache-control "no-cache, no-store, must-revalidate"

      - name: Invalidate CloudFront
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Origins.Items[?DomainName.contains(@, '${{ needs.deploy-infrastructure.outputs.frontend-bucket }}')]].Id" \
            --output text)
          
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"

  deploy-backend:
    name: Deploy Backend to ECS
    needs: [build-backend, deploy-infrastructure]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ needs.deploy-infrastructure.outputs.ecs-cluster }} \
            --service ${{ needs.deploy-infrastructure.outputs.ecs-service }} \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ needs.deploy-infrastructure.outputs.ecs-cluster }} \
            --services ${{ needs.deploy-infrastructure.outputs.ecs-service }}

  smoke-tests:
    name: Run Smoke Tests
    needs: [deploy-frontend, deploy-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test frontend
        run: |
          curl -f ${{ needs.deploy-infrastructure.outputs.frontend-url }} || exit 1
          echo "✅ Frontend is accessible"

      - name: Test backend health
        run: |
          curl -f ${{ needs.deploy-infrastructure.outputs.backend-url }}/api/health || exit 1
          echo "✅ Backend health check passed"

      - name: Summary
        run: |
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: ${{ needs.deploy-infrastructure.outputs.frontend-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API**: ${{ needs.deploy-infrastructure.outputs.backend-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Versions" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY 