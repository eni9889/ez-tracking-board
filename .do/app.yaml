name: sea-turtle-app
region: nyc

# DigitalOcean App Platform specification for EZ Tracking Board
# This mirrors the docker-compose.yml setup but uses DO managed services for production

envs:
- key: CLAUDE_API_KEY
  scope: RUN_AND_BUILD_TIME
  type: SECRET
  value: EV[1:Z9+4seZ2/IjpBzy3JW3ldVKTRQw98kdP:bjVVOA6AuxgWO0NNUVVrnZFvSuiE9z+04drVzY5brEHtpfW8V3D4Dl23s/cWRZbdI33MbBEnXzRWBHutFrPTkNPmNDZO8DoMJrOwcm0W7E9R9pci5U/3aARNEpngp5mGIOTcukzO5amHlU5MBvlmk9Nvs69hlvA9Qxvnmg==]
- key: EZDERM_USER
  scope: RUN_TIME
  type: SECRET
  value: # You'll need to set this in DigitalOcean dashboard
- key: EZDERM_PASS
  scope: RUN_TIME
  type: SECRET
  value: # You'll need to set this in DigitalOcean dashboard

# Static Sites
static_sites:
  # Frontend React Application
  - name: frontend
    source_dir: /frontend
    github:
      repo: eni9889/ez-tracking-board
      branch: main
      deploy_on_push: true
    build_command: npm ci --no-audit --no-fund && npm run build
    output_dir: build
    index_document: index.html
    catchall_document: index.html
    envs:
      - key: REACT_APP_API_URL
        value: ${backend.PUBLIC_URL}
      - key: REACT_APP_USE_MOCK_DATA
        value: "false"
      - key: NODE_ENV
        value: production

# Services
services:
  # Backend API Service
  - name: backend
    source_dir: /server
    github:
      repo: eni9889/ez-tracking-board
      branch: main
      deploy_on_push: true
    dockerfile_path: server/Dockerfile
    run_command: npm start
    http_port: 5001
    instance_count: 1
    instance_size_slug: apps-s-1vcpu-0.5gb
    health_check:
      http_path: /api/health
      initial_delay_seconds: 60
      period_seconds: 10
      timeout_seconds: 5
      success_threshold: 1
      failure_threshold: 3
    envs:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: "5001"
      - key: DB_HOST
        value: ${ez-tracking-postgres.HOSTNAME}
      - key: DB_PORT
        value: ${ez-tracking-postgres.PORT}
      - key: DB_NAME
        value: ${ez-tracking-postgres.DATABASE}
      - key: DB_USER
        value: ${ez-tracking-postgres.USERNAME}
      - key: DB_PASSWORD
        value: ${ez-tracking-postgres.PASSWORD}
      - key: DATABASE_URL
        value: ${ez-tracking-postgres.DATABASE_URL}
      - key: REDIS_HOST
        value: ${ez-tracking-redis.HOSTNAME}
      - key: REDIS_PORT
        value: ${ez-tracking-redis.PORT}
      - key: REDIS_PASSWORD
        value: ${ez-tracking-redis.PASSWORD}
      - key: REDIS_URL
        value: ${ez-tracking-redis.DATABASE_URL}
      - key: CORS_ORIGIN
        value: ${frontend.PUBLIC_URL}
      - key: DEBUG_AXIOS
        value: "false"
    alerts:
      - rule: CPU_UTILIZATION
        operator: GREATER_THAN
        value: 80
        window: FIVE_MINUTES
        disabled: false
      - rule: MEM_UTILIZATION
        operator: GREATER_THAN
        value: 80
        window: FIVE_MINUTES
        disabled: false
      - rule: RESTART_COUNT
        operator: GREATER_THAN
        value: 10
        window: FIVE_MINUTES
        disabled: false

  # Bull Board Job Monitoring
  - name: bull-board
    source_dir: /server
    github:
      repo: eni9889/ez-tracking-board
      branch: main
      deploy_on_push: true
    dockerfile_path: server/Dockerfile
    run_command: npm run bull-board
    http_port: 3001
    instance_count: 1
    instance_size_slug: apps-s-1vcpu-0.5gb
    health_check:
      http_path: /
      initial_delay_seconds: 30
      period_seconds: 10
      timeout_seconds: 5
      success_threshold: 1
      failure_threshold: 3
    envs:
      - key: NODE_ENV
        value: production
      - key: BULL_BOARD_PORT
        value: "3001"
      - key: REDIS_HOST
        value: ${ez-tracking-redis.HOSTNAME}
      - key: REDIS_PORT
        value: ${ez-tracking-redis.PORT}
      - key: REDIS_PASSWORD
        value: ${ez-tracking-redis.PASSWORD}
      - key: REDIS_URL
        value: ${ez-tracking-redis.DATABASE_URL}

# Workers
workers:
  # Background Worker Service
  - name: worker
    source_dir: /server
    github:
      repo: eni9889/ez-tracking-board
      branch: main
      deploy_on_push: true
    dockerfile_path: server/Dockerfile
    run_command: node dist/jobProcessor.js
    instance_count: 1
    instance_size_slug: apps-s-1vcpu-0.5gb
    envs:
      - key: NODE_ENV
        value: production
      - key: DB_HOST
        value: ${ez-tracking-postgres.HOSTNAME}
      - key: DB_PORT
        value: ${ez-tracking-postgres.PORT}
      - key: DB_NAME
        value: ${ez-tracking-postgres.DATABASE}
      - key: DB_USER
        value: ${ez-tracking-postgres.USERNAME}
      - key: DB_PASSWORD
        value: ${ez-tracking-postgres.PASSWORD}
      - key: DATABASE_URL
        value: ${ez-tracking-postgres.DATABASE_URL}
      - key: REDIS_HOST
        value: ${ez-tracking-redis.HOSTNAME}
      - key: REDIS_PORT
        value: ${ez-tracking-redis.PORT}
      - key: REDIS_PASSWORD
        value: ${ez-tracking-redis.PASSWORD}
      - key: REDIS_URL
        value: ${ez-tracking-redis.DATABASE_URL}
      - key: DEBUG_AXIOS
        value: "false"
    alerts:
      - rule: CPU_UTILIZATION
        operator: GREATER_THAN
        value: 80
        window: FIVE_MINUTES
        disabled: false
      - rule: MEM_UTILIZATION
        operator: GREATER_THAN
        value: 80
        window: FIVE_MINUTES
        disabled: false
      - rule: RESTART_COUNT
        operator: GREATER_THAN
        value: 10
        window: FIVE_MINUTES
        disabled: false

# Managed Database Services
databases:
  # PostgreSQL Database
  - cluster_name: ez-tracking-postgres
    db_name: defaultdb
    db_user: doadmin
    engine: PG
    name: ez-tracking-postgres
    production: true
    version: "17"

  # Redis Cache
  - cluster_name: ez-tracking-redis
    engine: VALKEY
    name: ez-tracking-redis
    production: true
    version: "8"

# App-Level Alerts (only deployment and domain alerts supported at app scope)
alerts:
  - rule: DEPLOYMENT_FAILED
    disabled: false
  - rule: DOMAIN_FAILED
    disabled: false

# Features
features:
  - buildpack-stack=ubuntu-22

# Ingress Rules for Service Routing
ingress:
  rules:
    # API routes go to backend
    - component:
        name: backend
      match:
        path:
          prefix: /api
    # Bull Board monitoring routes
    - component:
        name: bull-board
      match:
        path:
          prefix: /bull-board
    # Frontend routes (all unmatched routes go to frontend static site)
    - component:
        name: frontend
      match:
        path:
          prefix: /
